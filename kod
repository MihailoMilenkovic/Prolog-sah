/*igraj- ispisuje tablu i vraca true ako je moguca data lista poteza, a inace vraca false*/
/*podrazumeva se da je lista poteza zapisana u validnoj sahovskoj notaciji 
 * primer: ["f4","e5","g4","Qh4#"]*/
igraj(L,T):-
    obrni(L,LOBR),
    nadjiTablu(LOBR,T),
    ispisiTablu(T).
/*obrtanje liste na pocetku, da bi rad sa potezima bio laksi*/ 
obrni(L,LO):-
    obrni1(L,LO,[]).
obrni1([],LO,LO).
obrni1([G|R],LO,A):-obrni1(R,LO,[G|A]).
/*ispisivanje table -red po red, svaki red element po element*/
ispisiTablu([]):-!.
ispisiTablu([G|R]):-
    ispisiRed(G),ispisiTablu(R).
ispisiRed([]):-
    format('~n',[]),!.
ispisiRed([G|R]):-
    format('~a ',[G]),ispisiRed(R).
/*nadjiTablu- vraca tablu nakon nekog niza poteza
 	1)izlaz iz rekurzije- pocetna tabla
 	2)za svaki elemenat liste igramo potez ako je moguc i vracamo izmenjenu tablu*/
nadjiTablu([],[ ['R','N','B','Q','K','B','N','R'],
                ['P','P','P','P','P','P','P','P'],
                ['O','O','O','O','O','O','O','O'],
                ['O','O','O','O','O','O','O','O'],
                ['O','O','O','O','O','O','O','O'],
                ['O','O','O','O','O','O','O','O'],
                ['p','p','p','p','p','p','p','p'],
                ['r','n','b','q','k','b','n','r'] ] ):-!.
nadjiTablu([G|R],T):-
    nadjiTablu(R,T1),odigrajPotez(G,T1,T).
/*odigrajPotez-ima tablu pre poteza i potez, vraca tablu posle poteza ako je moguc, inace je false
 	0)pretvaramo string u list karaktera da bi lakse radili sa njima
 	1)nadjemo figuru koju treba pomeriti
    1)nadjemo koordinate polja gde treba da se dodje 
    2)prodjemo kroz tablu i nadjemo sve figure koje mogu da dodju do tog polja
    3)za svako polje proveravamo da li postoji data figura na tog polju
      a)ako ih nema nijedna- nemoguc potez
      b)ako ima vise- ako je navedeno koja je-moguce, inace ne
      c)ako ima samo jedna- pomerimo je na to polje, a njeno pocetno polje postaje prazno
    X)obrada posebnih slucajeva poteza (sahovi, patovi, promocije, rokade, en-passant itd.)*/
odigrajPotez(S,TSTARA,TNOVA):-
    string_chars(S,C),
   	nadjiFiguru(C,F),
    nadjiKrajnjePolje(C,ROWEND,COLEND),
    nadjiPocetnoPolje(F,ROWEND,COLEND,ROWSTART,COLSTART),
    pomeriSaKrajnjegNaPocetnoPolje(TSTARA,ROWSTART,COLSTART,ROWEND,COLEND,TNOVA),
    proveriUslove(C,TSTARA,TNOVA).
/*nadjiFiguru- nalazi tip figure koji treba da se pomeri
  1)ako je prvo slovo notacije neka od figura nju pomeramo
  2)inace figura koja treba da se pomeri je pesak*/
nadjiFiguru([G|_],G):-(==(G,'R');==(G,'N');==(G,'B');==(G,'Q');==(G,'K')),!.
nadjiFiguru(_,'P').
/*nadjiKrajnjePolje-u listi poteza su zadate vrsta i kolona krajnjeg polja npr 'b','4'.
  Garantovano je da je je posledje mesto gde su karakter izmedju 'a' i 'h' i broj izemdju '1' i '8'
  bas ono mesto gde treba da se dodje.
  Da bismo dobili koordinate, obrcemo listu karaktera i trezimo prvo mesto gde je broj
  (ovo radimo jer potezi kao sto su "Rc8xb8" su validni, ali c8 u ovom slucaju nije mesto gde top treba da dodje)*/
nadjiKrajnjePolje(C,ROWEND,COLEND):-
    obrni(C,COBR),nadjiKrajnjePolje1(COBR,ROWEND,COLEND).
nadjiKrajnjePolje1([G1|[G2|_]],ROWEND,COLEND):-
    char_code(G1,ROX),char_code('1',RO1),char_code('8',RO8),ROX>=RO1,ROX=<RO8,
	nadjiPolja(G1,G2,ROWEND,COLEND),!.
nadjiKrajnjePolje1([_|R],ROWEND,COLEND):-nadjiKrajnjePolje1(R,ROWEND,COLEND).
nadjiPolja(BR,CH,ROWEND,COLEND):-
    char_code(CH,ROX),char_code('a',ROA),ROWEND is ROX-ROA+1,
    char_code(BR,COX),char_code('1',CO1),COLEND is COX-CO1+1.
/*veliko slovo-upcase_atom(chstari,chnovi).*/ 
